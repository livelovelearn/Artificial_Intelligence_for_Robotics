# --------------
# USER INSTRUCTIONS
#
# Write a function called stochastic_value that 
# returns two grids. The first grid, value, should 
# contain the computed value of each cell as shown 
# in the video. The second grid, policy, should 
# contain the optimum policy for each cell.
#
# --------------
# GRADING NOTES
#
# We will be calling your stochastic_value function
# with several different grids and different values
# of success_prob, collision_cost, and cost_step.
# In order to be marked correct, your function must
# RETURN (it does not have to print) two grids,
# value and policy.
#
# When grading your value grid, we will compare the
# value of each cell with the true value according
# to this model. If your answer for each cell
# is sufficiently close to the correct answer
# (within 0.001), you will be marked as correct.

delta = [[-1, 0 ], # go up
         [ 0, -1], # go left
         [ 1, 0 ], # go down
         [ 0, 1 ]] # go right

delta_name = ['^', '<', 'v', '>'] # Use these when creating your policy grid.

# ---------------------------------------------
#  Modify the function stochastic_value below
# ---------------------------------------------

def stochastic_value(grid,goal,step_cost,collision_cost,success_prob):
    failure_prob = (1.0 - success_prob)/2.0 # Probability(stepping left) = prob(stepping right) = failure_prob
    value = [[1000 for row in range(len(grid[0]))] for col in range(len(grid))]
    
    temp = [[collision_cost for row in range(len(grid[0])+2)] for col in range(len(grid)+2)]
    for x in range(1, (len(temp)-1)):
        for y in range(1, (len(temp[0])-1)):
            if grid[x-1][y-1] == 1:
                temp[x][y] = collision_cost
            else:
                temp[x][y] = 1000
    
    helper_grid = [[1 for row in range(len(grid[0])+2)] for col in range(len(grid)+2)]
    for x in range(1, (len(helper_grid)-1)):
        for y in range(1, (len(helper_grid[0])-1)):
            helper_grid[x][y] = grid[x-1][y-1]
            
    policy = [[' ' for row in range(len(grid[0]))] for col in range(len(grid))]
    policy[goal[0]][goal[1]] = '*'
    change = True
    
    while change:
        change = False
        
        for x in range(len(helper_grid)):
            for y in range(len(helper_grid[0])):
                if x == goal[0]+1 and y == goal[1]+1:
                    if temp[x][y] > 0:
                        temp[x][y] = 0
                        value[x-1][y-1] = 0 
                        change = True
                
                elif helper_grid[x][y] == 0:
                    for a in range(len(delta)):
                        x2 = x + delta[a][0]
                        y2 = y + delta[a][1]
                        x2_left = x + delta[(a+1)%4][0]
                        y2_left = y + delta[(a+1)%4][1]
                        x2_right = x + delta[(a-1)%4][0]
                        y2_right = y + delta[(a-1)%4][1]
                        
                        if x2>=0 and x2<len(helper_grid) and y2>=0 and y2<len(helper_grid[0]) and helper_grid[x2][y2] == 0:
                            v2 = step_cost + temp[x2][y2]*success_prob + temp[x2_left][y2_left]*failure_prob + temp[x2_right][y2_right]*failure_prob
                            if v2 < temp[x][y] :
                                temp[x][y] = v2
                                value[x-1][y-1] = v2
                                change = True
                                policy[x-1][y-1] = delta_name[a]
    
     
    return value, policy

# ---------------------------------------------
#  Use the code below to test your solution
# ---------------------------------------------

grid = [[0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 1, 1, 0]]
goal = [0, len(grid[0])-1] # Goal is in top right corner
step_cost = 1
collision_cost = 100
success_prob = 0.5

value,policy = stochastic_value(grid,goal,step_cost,collision_cost,success_prob)
for row in value:
    print row
for row in policy:
    print row

# Expected outputs:
#
# [57.9029, 40.2784, 26.0665,  0.0000]
# [47.0547, 36.5722, 29.9937, 27.2698]
# [53.1715, 42.0228, 37.7755, 45.0916]
# [77.5858, 1000.00, 1000.00, 73.5458]
#
# ['>', 'v', 'v', '*']
# ['>', '>', '^', '<']
# ['>', '^', '^', '<']
# ['^', ' ', ' ', '^']
