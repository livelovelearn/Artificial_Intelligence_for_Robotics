Sense and Moving 1
#Given the list motions=[1,1] which means the robot 
#moves right and then right again, compute the posterior 
#distribution if the robot first senses red, then moves 
#right one, then senses green, then moves right again, 
#starting with a uniform prior distribution.

p=[0.2, 0.2, 0.2, 0.2, 0.2]
world=['green', 'red', 'red', 'green', 'green']
measurements = ['red', 'green']
motions = [1,1]
pHit = 0.6
pMiss = 0.2
pExact = 0.8
pOvershoot = 0.1
pUndershoot = 0.1

def sense(p, Z):
    q=[]
    for i in range(len(p)):
        hit = (Z == world[i])
        q.append(p[i] * (hit * pHit + (1-hit) * pMiss))
    s = sum(q)
    for i in range(len(q)):
        q[i] = q[i] / s
    return q

def move(p, U):
    q = []
    for i in range(len(p)):
        s = pExact * p[(i-U) % len(p)]
        s = s + pOvershoot * p[(i-U-1) % len(p)]
        s = s + pUndershoot * p[(i-U+1) % len(p)]
        q.append(s)
    return q
p=sense(p, measurements[0])
p=move(p, motions[0])
p=sense(p, measurements[1])
p=move(p, motions[1])

print p         


Localization Program:
colors = [['red', 'green', 'green',   'red', 'red'],
          ['red',   'red', 'green',   'red', 'red'],
          ['red',   'red', 'green', 'green', 'red'],
          ['red',   'red',   'red',   'red', 'red']]

measurements = ['green', 'green', 'green' ,'green', 'green']

p = [[1./20, 1./20, 1./20, 1./20, 1./20],
     [1./20, 1./20, 1./20, 1./20, 1./20],
     [1./20, 1./20, 1./20, 1./20, 1./20],
     [1./20, 1./20, 1./20, 1./20, 1./20]]

motions = [[0,0],[0,1],[1,0],[1,0],[0,1]]

sensor_right = 0.7

p_move = 0.8

def show(p):
    for i in range(len(p)):
        print p[i]

#Do not delete this comment!
#Do not use any import statements.
#Adding or changing any code above may
#cause the assignment to be graded incorrectly.

def sense(p, Z):
    q=[]
    s=0
    for i in range(len(p)):
        r=[]
        for j in range(len(p[i])):
            hit = (Z == colors[i][j])
            r.append(p[i][j]*(hit*sensor_right+(1-hit)*(1-sensor_right)))
        q.append(r)
                              
    for i in range(len(p)):
        s = s + sum(q[i])
                
    for i in range(len(p)):
        for j in range(len(p[i])):
            q[i][j] = q[i][j]/s
   
    return q

def move(p, U):
    q=[]
    for i in range(len(p)):
         r=[]
         for j in range(len(p[i])):
                s = (1-p_move)*p[i][j]
                s = s + p[(i-U[0])%len(p)][(j-U[1])%len(p[i])]*p_move
               
                r.append(s)
         q.append(r)
                
    for i in range(len(p)):
        s = s + sum(q[i])
        
    for i in range(len(p)):
        for j in range(len(p[i])):
            q[i][j] = q[i][j]/s
    return q
    

#Your probability array must be printed 
#with the following code.
for i in range(len(motions)):
    p=move(p, motions[i])
    p=sense(p, measurements[i])
show(p)